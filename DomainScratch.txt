What does a Checkers domain need?

1.) Each player has a color (red or black)

2.) Each checker has properties
	a.) A color
	b.) A rank (normal or king)
	c.) A position (coordinate on board)
	d.) Can move again (after capturing an enemy checker)
		i.) not forced to move

3.) A board has properties
	a.) Rows
		i.) List of individual squares
		ii.) Static member to pull from
		iii.) Whether or not a KING row
	b.) Columns
		i.) List of individual squares
		ii.) Static member to pull from
	c.) A dictionary of what pieces lie on which squares

4.) Each square has properties
	a.) A Row index
	b.) A Column index


	Ideas from Chess implementation
		1.) There exists a GameState that holds the Board information as well as who is next to Move, and a Message to display to user
		2.) There needs to be validation for legitimate moves
			a.) Can use 2 different types and validate an attempt into an actual
				i.) AttemptedMove
				ii.) Move
		3.) Board is a Map<Square, Piece option>
			a.) Use option type with Result<OK, ERROR>/RailwayProgramming for Move Validation

------------------------------------------------------------

Checker Game Rules used for Validation

1.) Alternating colors should take turns
	a.) eventually incorporate same color has additional chance to move
2.) Only move a checker piece on to an empty cell
3.) Checkers only move 1 space diagonally when not capturing
4.) Checkers only move 2 spaces diagonally when capturing
	a.) When capturing a piece, it must be of the opposing color

------------------------------------------------------------

Validate Move Shape
1.) Black can only move up and to the side (if not king)
2.) Red can only move down and to the side (if not king)
3.) Moves can have a y delta of 1 (if normal) or 2 (if capture)
4.) Moves can only have an x delta of 1 (if y delta is 1) or 2 (if y delta is 2)

------------------------------------------------------------

Drawing a particular cell in console

Output = [ ] or [x] or [o]

I need to know:
1.) Location of checker
	a.) Column
	b.) Row
2.) Piece option
	a.) Some
		i.) color of checker
	b.) None

Board = Map<Cell, Checker option>
		Cell = {Column = Column; Row = Row}
		Checker = Color * Rank
		Color = White | Black
		Rank = Soldier | King

foreach cell in board
	foreach col in cell
		match c with
		| H -> printfn "[%A]" board.[cell].Color
		| _ -> printf "[%A]" board.[cell].Color

------------------------------------------------------------

Bottom Border Builder

<padding> + repeated "___ " + "\n" +
<padding> + repeated " %A  " + "\n\n"

------------------------------------------------------------

Game loop - Recursive function

1.) render board
2.) write message from GameState object
3.) receive move input (A3 B4)
4.) parse input to AttemptedMove
5.) validate move
6.) return new GameState object
7.) clear the console
8.) return to start

------------------------------------------------------------

Algorithm for averaging cells
Assuming validation for diagonal move of 2
	1.) each cell has a column and row
	2.) resultColumn = indexof col1 + indexof col2 / 2
	3.) resultRow = indexof row1 + index of row2 / 2
	4.) return (resultColumn, resultRow)

	          0    1      2       3      4     5      6      7
type Column = A |  B  |   C   |   D  |   E  |  F  |   G   |  H
type Row =  One | Two | Three | Four | Five | Six | Seven | Eight

example #1 a1 c3
	1.) cols are A and C, rows are 1 and 3
	2.) resultCol = ((indexOf A = ) 0 + (indexOf C = ) 2 ) / 2
		resultCol = 2 / 2
		resultCol = 1
	3.) resultRow = ((indexOf One = ) 0 + (indexOf Three = ) 2 ) / 2
		resultRow = 2 / 2
		resultRow = 1
	4.) return ( Column.List.[1], Row.List.[1] ) 
		return B Two (correct)

example #2 d6 b8
	1.) D B, Six Eight
	2.) resultCol = (3 + 1) / 2
		resultCol = 2 (C)
	3.) resultRow = (5 + 7) / 2
		resultRow = 6 (Seven)

example #3 e5 c3	(king checker capture)
	1.) E C, 5 3
	2.) resultCol = (4, 2) / 2
		resultCol = 3
	3.) resultRow = (4, 2) / 2
		resultRow = 3

------------------------------------------------------------

Algorithm for finding potential cell options for capture
and how to decide whose turn it is afterwards

1.) find target cell
2.) convert to indices of static Lists
3.) find 4 new cells based on the integers
4.) filter out those which go past the max index of either array
5.) convert back to a list of Cells

We have a list of all possible legitimate cells that we could perform
a capture to get to. Validate the potential moves to see if any exist.

6.) Foreach Cell in list, perform validation
7.) Filter out moves that would cause errors.

All of the cells left in List will be valid moves. If there was a capture
and there are still potential future captures, it stays the piece colors turn

8.) Match list with
	a.) Any items -> color is same as piece
	b.) No items -> no valid additional moves, next players turn.